#!/bin/bash

#Reference/bibliography builder by Jeppe Trost Nielsen

#First converts pdfs to txt using pdftotxt files and searches for 
#"doi:" and find inSPIRE match or if that fails, searches for
#"arXiv:" (only the first match to avoid references) and finds
#an inSPIRE match.

#Both pdftotxt and curl takes some time, unfortunately. It is still
#way quicker than doing it yourself though.

#Options are:
# -s Silent mode, no output to terminal
# -f Specify format, choose one of the predetermined formats
# 	At present, bib and tex are supported (manual files of course are just taken as-is)

#For old/unreadable pdfs, use manual override:
#Save a {filename}.txt file next to the {filename}.pdf

#Test if pdftotext exists
command -v pdftotext >/dev/null 2>&1 || { echo >&2 "Requires pdftotext which is not installed.  Aborting."; exit 1; }

format=bib
silent=false

while getopts ":f:s" opt; do
	case $opt in
	f)
		format=$OPTARG		
		shift 2;;
	s)
		silent=true
		shift;;
	d)
		database=$OPTARG
		echo "This feature is not actually implemented"
		shift 2;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	:)
		echo "usage [-s] [-f export format] [-d database] [directory]"
		exit 1
		;;
	esac
done

if [ -n "$1" ]; then 
	if [ -d $1 ]; then
		cd $1;
	else
		echo "Error: directory $1 not found" ;
		exit 1 ;
	fi
fi

if [ ! -f *.pdf ]; then
	echo "No PDF files in the directory, exiting." ;
	exit 1 ;
fi

allowedformats=("bib" "tex")
if [ $(echo ${allowedformats[@]} | grep -o $format | wc -w) == 0 ];
then
	echo "not an allowed format"
	echo -n "allowed formats are: "
	echo ${allowedformats[@]}
	exit 1
fi

case $format in
	bib)	
		bibfile=bibliography.bib
		echo "%Automatically generated .bib	bibliography" > $bibfile
		;;
	tex)
		bibfile=bibliography.tex
		echo "%Automatically generated .tex bibliography" > $bibfile
		;;
	*)
		echo "This is not supposed to happen"
		;;
esac


logfile=biblog.txt
txtfile=jibberishfilename.txt


echo "%Generator by Jeppe TrÃ¸st Nielsen" >> $bibfile
echo "%Bibliography compiled on $(date)" >> $bibfile
echo " " >> $bibfile

echo "Logfile for $bibfile" > $logfile
echo " " >>$logfile

ls -1 *.pdf | while read i
do
	if [ $silent == false ]; then
		echo -n "Processing $i"
	fi
	
	echo "%$i" >> $bibfile
	echo "$i" >> $logfile

	if [ -f $( echo "$i" | sed 's/pdf/txt/' ) ]; #If a manual file exists! - eg. for super old articles
	then
		cat $( echo "$i" | sed 's/pdf/txt/' ) >> $bibfile
		echo "Used manual override" >> $logfile

	else
		pdftotext "$i" $txtfile
		
		ID=""
		ID=$(awk '/[Dd][Oo][Ii]:/ {print tolower($0);exit;}'  "$txtfile")
		if [ ! -z "$ID" ];
		then
			ID=$(echo $ID | awk 'i=index($0, "doi") {print toupper(substr($0, i))}' | awk '{print $1$2}')
			if [ "${ID:4:1}" -eq "${ID:4:1}" ] 2>/dev/null
			then
				echo "Found - $ID" >> $logfile
			else
				ID=""
			fi
		fi
		if [ -z "$ID" ];
		then
			ID=$(awk '/arXiv:/' "$txtfile" | awk -F 'v' '{print $1"v"$2;exit;}' | awk -F ':' '{print $2}')
			# See if arXiv no. exists and if last char is a number (check if actually an arXiv ID)
			if [ ! -z "$ID" ] && [ ${ID:$((${#ID}-1)):1} -eq ${ID:$((${#ID}-1)):1} ] 2>/dev/null
			then
				echo "Found - arXiv: $ID" >> $logfile
			else
				echo "Failed - no ID found" >> $logfile
				ID=""
				if [ $silent == false ]; then
					echo -n " (*)"
				fi
			fi
		fi

		if [ ! -z "$ID" ]
		then
			case $format in
				bib)
					latexcite=$(curl -s http://inspirehep.net/search?of=hx\&p=$ID | sed -n '212,412p' | sed '/<\/pre>/q' | sed '$s/\(.\{6\}\)$//')
					;;
				tex)
					latexcite=$(curl -s http://inspirehep.net/search?of=hlxe\&p=$ID | sed -n '211,214p')
					;;
				*)
					echo "This is not supposed to happen"
					;;
			esac
			
			if [[ $latexcite == *class=* ]] 
			#a lazy check of failure
			then
				echo "%Lookup failed, check log for info" >> $bibfile
				echo "Failed - Lookup from inSPIRE unsuccessfull" >> $logfile
				if [ $silent == false ]; then
					echo -n " (*)"
				fi
			else
				echo "$latexcite" >> $bibfile
			fi
		else
			echo "%No ID found" >> $bibfile
		fi
	fi

	echo " " >> $bibfile
	echo " " >> $logfile
	if [ $silent == false ]; then
		echo " "
	fi

	\rm -f "$txtfile"
done

if [ $silent == false ];then
	echo "Post-processing..."
fi

case $format in
	bib)
		;;
	tex)
		sed -ibak 's/&nbsp;//g' $bibfile
		sed -ibak 's/<br>/\'$'\n/g' $bibfile
		sed -ibak 's/<br \/>/\'$'\n/g' $bibfile 
		;;
	*)
		echo "This is not supposed to happen"
esac

\rm -f $bibfile"bak"

if [ $silent == false ];then
	echo "Bibliography saved in $bibfile"
	echo "Logfile saved in $logfile"
fi


if [ ! -z "$(awk '/Failed/' $logfile)" ]
then
	echo "Be sure to check $logfile for failed matches marked by (*)"
fi

if [ -n "$1" ]; then cd - > /dev/null ; fi
